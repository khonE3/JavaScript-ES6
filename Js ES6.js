//?üìã Data Types
// String (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
const name1 = 'John' // Single-quote
const name2 = "John" // Double-quote
const name3 = `John` // Backtick (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Template Literal)

// Number (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)
const income1 = 1000000       // Number
const income2 = 1_000_000     // Underscore
const income3 = 1e6           // Exponential Notation
const floating = 1.25e-6      // 0.00000125
const binary = 0b11010        // Binary (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô 2)
const octal = 0o32            // Octal (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô 8)
const hex = 0x1a              // Hexadecimal (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô 16)
const big = 9999999999999999n // BigInt

// Boolean (‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πá‡∏à)
const isPaid1 = true  // ‚úÖ
const isPaid2 = false // ‚ùå

// ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
const empty1 = null             // Null (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
const empty2 = undefined        // Undefined (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤)
const object = { key: 'value' } // Object (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Key-Value)
const array = [1, 2, 3]         // Array (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏¥‡∏ï‡∏¥)
// NaN = Not a number

console.log(name1, typeof name1) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•


//?üî† String
const firstName = 'John'
const lastName = 'Doe'
const age = 18

// ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥
console.log('Name: ' + firstName + ' ' + lastName + ', age: ' + age)
console.log(`Name: ${firstName} ${lastName}, age: ${age}`)

// ‡∏ï‡πà‡∏≠‡∏Ñ‡∏≥
let a = 'a', b = 'b', c = 'c'
let alphabet1 = a + b + c
let alphabet2
alphabet2 += a // alphabet2 = alphabet2 + a
alphabet2 += b // alphabet2 = alphabet2 + b
alphabet2 += c // alphabet2 = alphabet2 + c

// Escape Character
console.log('Backslash: \\')
console.log('Single-quote: \' & Double-quote: "')
console.log("Single-quote: ' & Double-quote: \"")
console.log(`Single-quote: ' & Double-quote: "`)  // üòé ‡πÉ‡∏ä‡πâ Backtick ‡∏à‡∏ö‡πÜ‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Quote ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô

// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
const fromNumber = String(123)
const fromObject = JSON.stringify({ name: 'John' })


//?üî†üõ†Ô∏è String Methods
const text = 'abc123'

text.length                 // üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
text.concat('456')          // üîó ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ä‡πâ + ‡∏Å‡πá‡πÑ‡∏î‡πâ)
text.charAt(2)              // üî†‚ùå (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏° index
text.at(2)                  // üî†‚ùå ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏° index ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô undefined
text[2]                     // üî†‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏° index
text.indexOf('c')           // üîçüî¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
text.includes('c')          // üîçüëå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
text.startsWith('abc')      // üîçüëå‚û°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
text.search(/\d+/)          // üîçüî¢üòé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö RegExp)
text.match(/\d/)            // üîçüëåüòé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö RegExp)
//[...text.matchAll(/\d/g)]   // üîçüëåüòéüåç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö RegExp ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ global)
text.replace(/\d/, 'X')     // ‚§µÔ∏è ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö RegExp)
text.replaceAll(/\d/g, 'X') // ‚§µÔ∏èüåç ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö RegExp ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ global)
text.substr(3, 6)           // ‚úÇÔ∏è‚ùå (Deprecated ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å) ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
text.substring(3, 6)        // ‚úÇÔ∏è‚ùå (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏∞ Swapped Indices)
text.slice(3, 6)            // ‚úÇÔ∏è‚úÖ ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÑ‡∏î‡πâ
text.split('')              // üîÄ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô (String to Array)
text.trim()                 // üßπ ‡∏ï‡∏±‡∏î Whitespace ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
text.repeat(3)              // üîÅ ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
text.padStart(10, '0')      // üî¢‚û°Ô∏è ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
text.padEnd(10, '0')        // üî¢‚¨ÖÔ∏è  ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
text.toLowerCase()          // üî† ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
text.toUpperCase()          // üî° ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà


//?üî¢ Number
const aa = 3
const bb = 2
const notANumber = NaN
const infinity = Infinity

console.log(a + b)   // ‡∏ö‡∏ß‡∏Å
console.log(a - b)   // ‡∏•‡∏ö
console.log(a * b)   // ‡∏Ñ‡∏π‡∏ì
console.log(a / b)   // ‡∏´‡∏≤‡∏£
console.log(a % b)   // ‡∏´‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÄ‡∏®‡∏©
console.log(a ** b) // ‡∏¢‡∏Å‡∏Å‡πç‡∏≤‡∏•‡∏±‡∏á
console.log((2 + 3) * ((9 - 3) / 2)) // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô
console.log(2 + 3 * 9 - 3 / 2) // ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ä‡πà‡∏ô * / ‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô + -

let num = 0
num++     // num = num + 1
num--     // num = num - 1
num += 2  // num = num + 2
num -= 2  // num = num - 2
num *= 2  // num = num * 2
num /= 2  // num = num / 2
num %= 2  // num = num % 2
num **= 2 // num = num ** 2

let x = 0, y = 0
console.log(x++) // 0
console.log(x)   // 1
console.log(++y) // 1
console.log(y)   // 1

// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
const fromString1 = Number('00123')    // 123
const fromString2 = parseInt('123abc') // 123
const fromString3 = +'123'             // 123

//! IEEE 754
console.log(0.3 - 0.2) // ‚ùì ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0.1 ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á

console.log((0.3).toFixed(2))  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢
console.log((0.3).toFixed(16)) // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á 16 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
console.log((0.3).toFixed(17)) // ‚ùå ‡πÅ‡∏™‡∏î‡∏á 17 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 0.3 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô

// ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå IEEE 754 ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å Binary (2) ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô Decimal (10)

const base = 2 // ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2, 10
console.log((1).toString(base), (2).toString(base), (3).toString(base), (4).toString(base), (5).toString(base), (6).toString(base), (7).toString(base), (8).toString(base), (9).toString(base), (10).toString(base), (11).toString(base), (11).toString(base))
console.log((0.3).toString(2)) // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô Binary

// ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà JavaScript ‡πÅ‡∏ï‡πà Python, C++, Java, PHP, Go, SQL ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏•‡πâ‡∏ß‡∏ô‡∏Å‡πá‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ä‡πà‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
// ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ 2 / 3 = 0.6666666666666666 (0.67) ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://www.geeksforgeeks.org/ieee-standard-754-floating-point-numbers/

const aaa = 0.3
const bbb = 0.2
console.log(a - b)
console.log((a - b).toFixed(1))         // ‡πÅ‡∏Å‡πâ‡∏î‡πâ‡∏ß‡∏¢ .toFixed()
console.log(((a * 10) - (b * 10)) / 10) // ‡πÅ‡∏Å‡πâ‡∏î‡πâ‡∏ß‡∏¢ *10 ‡πÅ‡∏•‡∏∞ /10

console.log((a - b).toFixed(17)) // ‚ùå ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö

// üßë‚Äçüíª ‡∏°‡∏∑‡∏≠‡πÇ‡∏õ‡∏£‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ Library ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô decimal.js: https://mikemcl.github.io/decimal.js/

//?üî¢üõ†Ô∏è Number Methods
const number = 31

number.toString()          // üî† ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String
number.toString(2)         // üî† ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏≠‡∏á)
number.toString(8)         // üî† ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡πÅ‡∏õ‡∏î)
number.toString(16)        // üî† ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String (‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô‡∏™‡∏¥‡∏ö‡∏´‡∏Å)
//numberWithFloat.toFixed(2)  *Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
isNaN(numberAsNaN)         // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô NaN ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
isFinite(number)           // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Infinity)
Number('150px')            // üî¢‚ùå ‡πÑ‡∏î‡πâ NaN ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
parseInt('15.459')         // üî¢‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
parseInt('150px')          // üî¢‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
parseFloat('1.2.3')        // üî¢‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
parseFloat('95.45px')      // üî¢‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô


//?‚ûóüõ†Ô∏è Math Methods
Math.round(1.5)              // ‚ûï‚ûñ ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
Math.floor(1.5)              // üîª ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏•‡∏á
Math.ceil(1.5)               // üî∫ ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏Ç‡∏∂‡πâ‡∏ô
Math.trunc(1.5)              // üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏®‡∏©‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©
Math.sign(-9)                // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö (1, 0, -1)
Math.abs(-9)                 // ‚ûï ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ö‡∏ß‡∏Å
Math.pow(2, 3)               // üîº ‡∏¢‡∏Å‡∏Å‡πç‡∏≤‡∏•‡∏±‡∏á
2 ** 3                       // üîº ‡∏¢‡∏Å‡∏Å‡πç‡∏≤‡∏•‡∏±‡∏á
Math.sqrt(64)                // üî≥ Square Root
Math.min(20, 50, 30, 10, 40) // üîç‚¨áÔ∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
Math.max(20, 50, 30, 10, 40) // üîç‚¨ÜÔ∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
Math.random()                // üé≤ ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å 0 ‡∏ñ‡∏∂‡∏á 1


//?‚úÖ‚ùå Boolean
const aaaa = 2
const bbbb = 5
console.log(a < b)   // ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤
console.log(a > b)   // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
console.log(a <= b)  // ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö
console.log(a >= b)  // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö
console.log(a == b)  // ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Value)
console.log(a != b)  // ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Value)
console.log(a === b) // ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Data Type & Value
console.log(a !== b) // ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Data Type & Value
console.log(a = b)   // ‚ö†Ô∏è ‡∏£‡∏∞‡∏ß‡∏±‡∏á: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ (Assignment)

//? Logic
const t = true
const f = false
const not = !t
console.log(t && f) // ‡πÅ‡∏•‡∏∞
console.log(t || f) // ‡∏´‡∏£‡∏∑‡∏≠

const input = 15
console.log(input >= 10 && input <= 20) // 10 ‡∏ñ‡∏∂‡∏á 20

// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
// const fromString1 = Boolean(' ') // true
// const fromString2 = Boolean('')  // false
// 0, NaN, '', null, undefined = false


//?üí´ Short-Circuit Evaluation
isActive && renderActive() // ‡∏ñ‡πâ‡∏≤ Boolean(isActive) = true ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠
input || 'Default Value'   // ‡∏ñ‡πâ‡∏≤ Boolean(input) = false ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠
input && 'Default Value'   // ‡∏ñ‡πâ‡∏≤ input = null || undefined ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ï‡πà‡∏≠



//?üçî Array
const colors = ['red', 'green', 'blue']
console.log(typeof colors) // ‚ùì object ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ JavaScript ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó array ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö object ‡πÅ‡∏ó‡∏ô
console.log(colors[0])     // üî¥ red
console.log(colors[1])     // üü¢ green
console.log(colors[2])     // üîµ blue
console.log(colors[3])     // üö´ undefined (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)

const arr1 = [1, 2, 3]
const arr2 = [1, 2, 3]
arr1 === arr2         // ‚ùå ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
_.isEqual(arr1, arr2) // ‚úÖ ‡πÉ‡∏ä‡πâ Lodash ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡∏ô

//const arr3 = arr1                  // Reference Type
//const arr3 = structuredClone(arr1) // Deep Clone

const [red, green, blue] = colors // Array Destructuring
arr1.concat(arr2)          // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Method)
//[...arr1, ...arr2]         // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Array Spread)
Math.max(...arr1)          // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Array Spread)
function sum(...numbers) { // Rest Parameters
  Array.isArray(numbers)   // true
}


//?üçîüõ†Ô∏è Array Methods
const list = ['A', 'B', 'C']
const people = ['Anna', 'John', 'Jane', 'Joe', 'Kevin', 'Max', 'Sally', 'Zoe', 'Tina']

list.length                   // üìè ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Array items
list.at(0)                    // üî† ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Array ‡∏ï‡∏≤‡∏° Index (‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÑ‡∏î‡πâ)
list[0]                       // üî† ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Array ‡∏ï‡∏≤‡∏° Index
list.concat(['D', 'E', 'F'])  // üîó ‡∏£‡∏ß‡∏° Array
//[...list, ...['D', 'E', 'F']] // üîó ‡∏£‡∏ß‡∏° Array
list.join('-')                // üß©üß©üß© ‡∏£‡∏ß‡∏° Array ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
list.reverse()                // üîÄ ‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö Array
[3, 1, 2].sort()              // üîÉ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Array
[[1, 2, 3], [4, 5, 6]].flat() // ‚¨áÔ∏è ‡∏•‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Array
list.push('D')                // ‚ûï‚û°Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Items ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
list.unshift('Z')             // ‚ûï‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Items ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
list.pop()                    // ‚ûñ‚û°Ô∏è ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
list.shift()                  // ‚ûñ‚¨ÖÔ∏è ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
listSlice.slice(2, 4)         // üóëÔ∏èüî¢ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà 2 ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà 4 (‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏•‡∏ö 2, 3)
listSplice.splice(2, 2)       // üóëÔ∏èüìè ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 2 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏•‡∏ö 2, 3)

// üî¨ ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Callback
people.filter(person => person.startsWith('J'))

// üëå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
people.includes('John')

// üîí‚¨ÖÔ∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Value ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
people.find(person => person.startsWith('J'))

// üîë‚¨ÖÔ∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö Key ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
people.findIndex(person => person.startsWith('J'))

// üîí‚û°Ô∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Value ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
people.findLast(person => person.startsWith('J'))

// üîë‚û°Ô∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö Key ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
people.findLastIndex(person => person.startsWith('J'))

// ‚úÖ‚úÖ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° Callback
people.every(person => typeof person === 'string')

// ‚úÖ‚ùå‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ö‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° Callback
people.some(person => person.endsWith('y'))

// üåà ‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏≤‡∏° Callback (ü©∑ ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å!)
people.map(person => person.toUpperCase())

// ‚ûñ ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å Array ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡∏ï‡∏≤‡∏° Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏¢ .join())
numbers.reduce((total, number) => total + number, 0)


//?üç° Set
const set1 = new Set(['A', 'B', 'C'])
const set2 = new Set(['B', 'C', 'D'])

set.has('A')            // üîç Set.has() ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
set.add('D')            // ‚úçÔ∏è Set.add() ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
set.delete('B')         // üóëÔ∏è Set.delete() ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
set.size                // üìè Set.size ‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
set1.difference(set2)   // Difference
set1.intersection(set2) // Intersection
set1.symmetricDifference(set2) // Symmetric Difference
set1.union(set2)        // Union


//?üç≠ Object
const person = {
  name: 'John Doe',
  age: 22,
  isPaid: true,
  showInfo: function () { // Declaration
    return `Name: ${this.name}, age: ${this.age}`
  },
  showInfo() {            // Shorthand
    return `Name: ${this.name}, age: ${this.age}`
  }
}
console.log(person.name)          // (Property) John Doe
console.log(person.age)           // (Property) 22
console.log(person.isPaid)        // (Property) true
console.log(person['isPaid'])     // (Property) true
const getKey = 'isPaid'
console.log(person[getKey])       // (Property) true
console.log(person.address?.city) // (Optional Chaining) undefined
console.log(person.showInfo())    // (Method) Name: John Doe, age: 22

person.age++          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Property (23)
person.age = 23       // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Property (23)
person.country = 'US' // ‡πÄ‡∏û‡∏¥‡πà‡∏° Property
delete person.isPaid  // ‡∏•‡∏ö Property

'country' in person              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Property ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
person.hasOwnProperty('country') // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Property ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

const data1 = { message: 'ok' }
const data2 = { message: 'ok' }
data1 === data2         // ‚ùå ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
_.isEqual(data1, data2) // ‚úÖ ‡πÉ‡∏ä‡πâ Lodash ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡∏ô

//const data3 = data1                  // Reference Type
//const data3 = structuredClone(data1) // Deep Clone

//const { name, age } = person // Object Destructuring
//{ ...person, country: 'TH' } // ‡∏£‡∏ß‡∏° Object (Object Spread)
Object.assign({}, person, { country: 'TH' }) // ‡∏£‡∏ß‡∏° Object (Method)


//?üç≠üõ†Ô∏è Object Methods
const persons = { name: 'John Doe', age: 22 }

Object.keys(persons)    // Object to Array (Keys)
Object.values(persons)  // Object to Array (Values)
Object.entries(persons) // Object to Array (Keys & Values)
Object.fromEntries([['name', 'John Doe'], ['age', 22]]) // Array to Object

JSON.stringify(persons)                        // Object to String
JSON.parse('{"name": "John Doe", "age": 22}') // String to Object


//?üóÉÔ∏è Object-oriented Programming (OOP)
// Design Pattern: https://refactoring.guru/

class User {
  username = ''  // Public Property
  #password = '' // Private Property
  constructor(username, password) {
    this.username = username
    this.#password = password
  }
  login(password) {        // Public Method
    // ...
  }
  logout() {
    // ...
  }
  #getPassword() {         // Private Method
    // ...
  }
  static isLogin(user) {   // Static Method
    // ...
  }
  get password() {         // Getter
    // ...
  }
  set password(password) { // Setter
    // ...
  }
}

class Admin extends User {
  isSuperAdmin = false
  constructor(username, password, isSuperAdmin) {
    super(username, password) // Call Parent Constructor
    this.isSuperAdmin = isSuperAdmin
  }
  deleteUser(userId) {
    // ...
  }
}

const user = new User('john', 'user123') // new Instance
const admin = new Admin('jane', 'admin123', true)
user.login('user123')    // Call Instance Method
user.username            // Call Instance Property
user.password            // Call Getter
user.password = 'new123' // Call Setter
User.isLogin(user)       // Call Static Method
admin.login('admin123')
admin.deleteUser(1)


//?‚ö†Ô∏è Error Handling
try {
  someFunctionDoAnything()
  maybeItWillBeThrow()
  if (hasError) {
    throw new Error('Something went wrong')
  }
} catch (error) {
  if (error instanceof SomeErrorClass) {
    // ...
  } else if (error instanceof AnotherErrorClass) {
    // ...
  }
} finally {
  // ... (optional)
}


//?ü´∏‚åö Promise & Async/Await
function doSomething(params, cb) { // Callback
  // ...
  cb(error, result)
}

function doSomething(params) {   // Promise
  return new Promise((resolve, reject) => {
    // ...
    resolve(result)
    reject(error)
  })
}

// Call as Callback
doSomething(args, (error, result) => {
  if (error) {
    // ...
  } else {
    // result ...
  }
})

// Call as Promise
doSomething(args)
  .then((result) => {
    // ...
  })
  .catch((error) => {
    // ...
  })

// Call Promise as Async/Await
async function run() {
  try {
    const result = await doSomething(args)
    // ...
  } catch (error) {
    // ...
  }
}
run() // ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô async function ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®


//?ü´∏üõ†Ô∏è Promise Methods
const jobs = [
  doSomething(args1),
  doSomething(args2),
]

Promise.all(jobs)        // ‡∏£‡∏≠‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ô‡∏à‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏´‡πâ‡∏≤‡∏° throw
Promise.allSettled(jobs) // ‡∏£‡∏≠‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ô‡∏à‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à throw ‡πÑ‡∏î‡πâ
Promise.race(jobs)       // ‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏£‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ ‡∏´‡πâ‡∏≤‡∏° throw
Promise.any(jobs)        // ‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏£‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ throw ‡πÑ‡∏î‡πâ


//?üó∫Ô∏è Map
//const map = new Map([['name', 'John Doe'], ['age', 22])

map.has('age')       // üîç Map.has() ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
map.set('age', 23)   // ‚úçÔ∏è Map.set() ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
map.get('age')       // ‚ÜóÔ∏è Map.get() ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Key
map.delete('isPaid') // üóëÔ∏è Map.delete() ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
map.size             // üìè Map.size ‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•


//?‚åõ Delay
const timeoutId = setTimeout(() => {
  // ‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
}, 1000) // (1000 = 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

const intervalId = setInterval(() => {
  // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
}, 1000)

clearTimeout(timeoutId) // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô setTimeout
clearInterval(intervalId) // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô setInterval

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô Delay ‡πÅ‡∏ö‡∏ö Promise
const delay = ms => new Promise(resolve => setTimeout(resolve, ms))
await delay(1000) // ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î


//?üìÖ‚åö Date & Time
const date = new Date()

date.getFullYear()     // ‡∏õ‡∏µ
date.getMonth()        // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° = 0)
date.getDate()         // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
date.getHours()        // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
date.getMinutes()      // ‡∏ô‡∏≤‡∏ó‡∏µ
date.getSeconds()      // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
date.getMilliseconds() // ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
date.getDay()          // 0 ‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå 6 ‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå
date.getTime()         // ‡πÄ‡∏ß‡∏•‡∏≤ (Unix Timestamp)

const locale = 'th'
const options = {       // Docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locale_options
  hourCycle: 'h24',     // ‡∏ô‡∏±‡∏ö‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  calendar: 'buddhist', // ‡∏õ‡∏µ ‡∏û.‡∏®.
}

date.toLocaleString(locale, options)     // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° locale, options
date.toLocaleDateString(locale, options) // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏° locale, options
date.toLocaleTimeString(locale, options) // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° locale, options
date.toISOString()                       // ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö ISO


//?üîó URL
const url = new URL('https://example.com:8080/path/name?query=value#hash')

url.origin       // https://example.com:8080
url.protocol     // https:
url.host         // example.com:8080
url.hostname     // example.com
url.port         // 8080
url.pathname     // /path/name
url.search       // ?query=value
url.hash         // #hash

url.searchParams                        // URLSearchParams
url.searchParams.get('query')           // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Query
url.searchParams.append('key', 'value') // ‡πÄ‡∏û‡∏¥‡πà‡∏° Query ‡πÉ‡∏´‡∏°‡πà
url.searchParams.set('key', 'value')    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Query ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á Query ‡πÄ‡∏î‡∏¥‡∏°
url.searchParams.delete('key')          // ‡∏•‡∏ö Query

encodeURIComponent(url) // Encode ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
decodeURIComponent(url) // Decode ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ


//?üê∂ü¶¥ Fetch
//const url = 'https://jsonplaceholder.typicode.com/posts/1'

fetch(url)
  .then(response => response.json())
  .then(json => console.log(json))
  .catch(error => console.error(error))

async function run() {
  try {
    const response = await fetch(url)
    const json = await response.json()
    console.log(json)
  } catch (error) {
    console.error(error)
  }
}
run()

fetch(url, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ name: 'John Doe' }),
  include: 'credentials'
})


//?‚å®Ô∏è Form Data
const formData = new FormData()
const file = document.querySelector('#avatar').files[0]

formData.append('name', 'John Doe')
formData.append('age', 22)
formData.append('avatar', file)

fetct('/api/user/upload-avatar', {
  method: 'POST',
  body: formData
})



//?üñ•Ô∏è DOM
document.documentElement // <html>
document.body            // <body>
document.head            // <head>
document.title           // <title>
document.links           // <a>
document.images          // <img>
document.forms           // <form>
document.scripts         // <script>
document.fonts           // FontFaceSet
document.getElementById('my-text')           // #my-text
document.getElementsByClassName('text-blue') // .text-blue
document.getElementsByTagName('p')           // <p>
document.querySelector('#my-text')           // #my-text
document.querySelectorAll('ul li')           // ul li

const el = document.querySelector('#some-element')
el.textContent = 'Hello, world!'     // Text ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
el.innerHTML = '<b>Bold</b>'         // ‡πÉ‡∏ä‡πâ HTML ‡πÑ‡∏î‡πâ
el.style.backgroundColor = 'red'     // Style CSS
el.classList.add('my-class')         // ‡πÄ‡∏û‡∏¥‡πà‡∏° Class
el.classList.remove('my-class')      // ‡∏•‡∏ö Class
el.classList.toggle('my-class')      // ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Class
el.classList.contains('my-class')    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Class
el.attributes                        // Attributes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
el.hasAttribute('href')              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Attribute
el.getAttribute('href')              // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Attribute
el.href                              // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Attribute
el.setAttribute('href', '/new/page') // ‡πÄ‡∏û‡∏¥‡πà‡∏° Attribute
el.removeAttribute('href')           // ‡∏•‡∏ö Attribute
el.dataset.myAttribute               // [data-my-attribute]
el.firstElementChild                 // Child ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
el.lastElementChild                  // Child ‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
el.nextElementSibling                // Sibling ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
el.previousElementSibling            // Sibling ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
el.parentElement                     // Parent

const aaaaa = document.createElement('a')
a.href = '/new/page'
a.textContent = 'New Page'
el.append(a)       // ‡πÄ‡∏û‡∏¥‡πà‡∏° Element ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á
el.prepend(a)      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Element ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
el.replaceWith(a)  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà Element
el.removeChild(document.querySelector('#some-child-element')) // ‡∏•‡∏ö Child Element
el.remove()        // ‡∏•‡∏ö Element

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Event ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: https://developer.mozilla.org/en-US/docs/Web/Events
el.onclick = () => {}                     // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener
el.addEventListener('click', () => {})    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener
el.removeEventListener('click', () => {}) // ‡∏•‡∏ö Event Listener

form.addEventListener('submit', (event) => {
  event.preventDefault()  // ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Event ‡πÄ‡∏î‡∏¥‡∏° (Submit ‡∏ú‡πà‡∏≤‡∏ô HTML <form>)
})
button.addEventListener('click', (event) => {
  event.stopPropagation() // ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Event ‡∏à‡∏≤‡∏Å Parent
  event.target            // Element ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á Children Element)
  event.currentTarget     // Element ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Ç‡∏≠‡∏á Event Listener ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡πà‡∏ô
})
document.addEventListener('DOMContentLoaded', () => {}) // ‡∏£‡∏≠ DOM ‡πÄ‡∏™‡∏£‡πá‡∏à


//?üíΩ localStorage
localStorage.setItem('name', 'John Doe') // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
localStorage.getItem('name')             // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
localStorage.removeItem('name')          // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
localStorage.clear()                     // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

sessionStorage.setItem('name', 'John Doe')
sessionStorage.getItem('name')
sessionStorage.removeItem('name')
sessionStorage.clear()


//?üßã Web API
// Clipboard API
navigator.clipboard.writeText(text)

// Geolocation API
navigator.geolocation.getCurrentPosition((position) => {
  const { latitude, longitude } = position.coords
})

// Screen Capture API
const stream = await navigator.mediaDevices.getDisplayMedia({
  video: true
})

// Share API
navigator.share({
  title: 'Hello, world!',
  text: 'This is a share',
  url: 'https://example.com'
})

// Speech Synthesis API
const utterance = new SpeechSynthesisUtterance('Hello, world!')
speechSynthesis.speak(utterance)

// Speech Recognition API
const speechRecognition = new SpeechRecognition()
speechRecognition.onresult = (event) => {
  const transcript = event.results[0][0].transcript
}

// Picture-in-Picture API
if (document.pictureInPictureElement) {
  document.exitPictureInPicture()
} else {
  videoElement.requestPictureInPicture()
}

// Notification API
Notification.requestPermission().then((result) => {
  if (result === 'granted') {
    const notification = new Notification('Hello, world!', {
      body: 'This is a notification',
      icon: 'https://example.com/icon.png'
    })
  }
})

// File API
inputFileElement.addEventListener('change', (event) => {
  const reader = new FileReader()
  reader.onload = () => {
    previewImage.src = reader.result
  }
  reader.readAsDataURL(event.target.files[0])
})

